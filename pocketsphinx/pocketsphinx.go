// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Fri, 02 Sep 2016 17:31:25 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package pocketsphinx

/*
#cgo pkg-config: pocketsphinx
#include "pocketsphinx.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Init function as declared in pocketsphinx/pocketsphinx.h:91
func Init(config *CommandLn) *Decoder {
	cconfig, _ := (*C.cmd_ln_t)(unsafe.Pointer(config)), cgoAllocsUnknown
	__ret := C.ps_init(cconfig)
	__v := *(**Decoder)(unsafe.Pointer(&__ret))
	return __v
}

// Reinit function as declared in pocketsphinx/pocketsphinx.h:111
func Reinit(ps *Decoder, config *CommandLn) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cconfig, _ := (*C.cmd_ln_t)(unsafe.Pointer(config)), cgoAllocsUnknown
	__ret := C.ps_reinit(cps, cconfig)
	__v := (int32)(__ret)
	return __v
}

// Args function as declared in pocketsphinx/pocketsphinx.h:120
func Args() *Arg {
	__ret := C.ps_args()
	__v := NewArgRef(unsafe.Pointer(__ret))
	return __v
}

// Retain function as declared in pocketsphinx/pocketsphinx.h:133
func Retain(ps *Decoder) *Decoder {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_retain(cps)
	__v := *(**Decoder)(unsafe.Pointer(&__ret))
	return __v
}

// Free function as declared in pocketsphinx/pocketsphinx.h:146
func Free(ps *Decoder) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_free(cps)
	__v := (int32)(__ret)
	return __v
}

// GetConfig function as declared in pocketsphinx/pocketsphinx.h:157
func GetConfig(ps *Decoder) *CommandLn {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_config(cps)
	__v := *(**CommandLn)(unsafe.Pointer(&__ret))
	return __v
}

// GetLogmath function as declared in pocketsphinx/pocketsphinx.h:168
func GetLogmath(ps *Decoder) *Logmath {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_logmath(cps)
	__v := *(**Logmath)(unsafe.Pointer(&__ret))
	return __v
}

// GetFe function as declared in pocketsphinx/pocketsphinx.h:179
func GetFe(ps *Decoder) *Fe {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_fe(cps)
	__v := *(**Fe)(unsafe.Pointer(&__ret))
	return __v
}

// UpdateMllr function as declared in pocketsphinx/pocketsphinx.h:204
func UpdateMllr(ps *Decoder, mllr *Mllr) *Mllr {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cmllr, _ := (*C.ps_mllr_t)(unsafe.Pointer(mllr)), cgoAllocsUnknown
	__ret := C.ps_update_mllr(cps, cmllr)
	__v := *(**Mllr)(unsafe.Pointer(&__ret))
	return __v
}

// GetLmset function as declared in pocketsphinx/pocketsphinx.h:218
func GetLmset(ps *Decoder) *NgramModel {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_lmset(cps)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// UpdateLmset function as declared in pocketsphinx/pocketsphinx.h:237
func UpdateLmset(ps *Decoder, lmset *NgramModel) *NgramModel {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	clmset, _ := (*C.ngram_model_t)(unsafe.Pointer(lmset)), cgoAllocsUnknown
	__ret := C.ps_update_lmset(cps, clmset)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// GetFsgset function as declared in pocketsphinx/pocketsphinx.h:249
func GetFsgset(ps *Decoder) *FsgSet {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_fsgset(cps)
	__v := *(**FsgSet)(unsafe.Pointer(&__ret))
	return __v
}

// UpdateFsgset function as declared in pocketsphinx/pocketsphinx.h:262
func UpdateFsgset(ps *Decoder) *FsgSet {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_update_fsgset(cps)
	__v := *(**FsgSet)(unsafe.Pointer(&__ret))
	return __v
}

// LoadDict function as declared in pocketsphinx/pocketsphinx.h:279
func LoadDict(ps *Decoder, dictfile string, fdictfile string, format string) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cdictfile, _ := unpackPCharString(dictfile)
	cfdictfile, _ := unpackPCharString(fdictfile)
	cformat, _ := unpackPCharString(format)
	__ret := C.ps_load_dict(cps, cdictfile, cfdictfile, cformat)
	__v := (int32)(__ret)
	return __v
}

// SaveDict function as declared in pocketsphinx/pocketsphinx.h:292
func SaveDict(ps *Decoder, dictfile string, format string) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cdictfile, _ := unpackPCharString(dictfile)
	cformat, _ := unpackPCharString(format)
	__ret := C.ps_save_dict(cps, cdictfile, cformat)
	__v := (int32)(__ret)
	return __v
}

// AddWord function as declared in pocketsphinx/pocketsphinx.h:314
func AddWord(ps *Decoder, word string, phones string, update int32) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cword, _ := unpackPCharString(word)
	cphones, _ := unpackPCharString(phones)
	cupdate, _ := (C.int)(update), cgoAllocsUnknown
	__ret := C.ps_add_word(cps, cword, cphones, cupdate)
	__v := (int32)(__ret)
	return __v
}

// DecodeRaw function as declared in pocketsphinx/pocketsphinx.h:335
func DecodeRaw(ps *Decoder, rawfh *File, uttid string, maxsamps int) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	crawfh, _ := (*C.FILE)(unsafe.Pointer(rawfh)), cgoAllocsUnknown
	cuttid, _ := unpackPCharString(uttid)
	cmaxsamps, _ := (C.long)(maxsamps), cgoAllocsUnknown
	__ret := C.ps_decode_raw(cps, crawfh, cuttid, cmaxsamps)
	__v := (int32)(__ret)
	return __v
}

// DecodeSenscr function as declared in pocketsphinx/pocketsphinx.h:347
func DecodeSenscr(ps *Decoder, senfh *File, uttid string) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	csenfh, _ := (*C.FILE)(unsafe.Pointer(senfh)), cgoAllocsUnknown
	cuttid, _ := unpackPCharString(uttid)
	__ret := C.ps_decode_senscr(cps, csenfh, cuttid)
	__v := (int32)(__ret)
	return __v
}

// StartUtt function as declared in pocketsphinx/pocketsphinx.h:363
func StartUtt(ps *Decoder, uttid string) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cuttid, _ := unpackPCharString(uttid)
	__ret := C.ps_start_utt(cps, cuttid)
	__v := (int32)(__ret)
	return __v
}

// GetUttid function as declared in pocketsphinx/pocketsphinx.h:373
func GetUttid(ps *Decoder) string {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_uttid(cps)
	__v := packPCharString(__ret)
	return __v
}

// ProcessRaw function as declared in pocketsphinx/pocketsphinx.h:388
func ProcessRaw(ps *Decoder, data []int16, nSamples uint, noSearch int32, fullUtt int32) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cdata, _ := (*C.int16)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	cnSamples, _ := (C.size_t)(nSamples), cgoAllocsUnknown
	cnoSearch, _ := (C.int)(noSearch), cgoAllocsUnknown
	cfullUtt, _ := (C.int)(fullUtt), cgoAllocsUnknown
	__ret := C.ps_process_raw(cps, cdata, cnSamples, cnoSearch, cfullUtt)
	__v := (int32)(__ret)
	return __v
}

// ProcessCep function as declared in pocketsphinx/pocketsphinx.h:408
func ProcessCep(ps *Decoder, data [][]float32, nFrames int32, noSearch int32, fullUtt int32) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	cdata, _ := unpackArgSSFloat(data)
	cnFrames, _ := (C.int)(nFrames), cgoAllocsUnknown
	cnoSearch, _ := (C.int)(noSearch), cgoAllocsUnknown
	cfullUtt, _ := (C.int)(fullUtt), cgoAllocsUnknown
	__ret := C.ps_process_cep(cps, cdata, cnFrames, cnoSearch, cfullUtt)
	packSSFloat(data, cdata)
	__v := (int32)(__ret)
	return __v
}

// GetNFrames function as declared in pocketsphinx/pocketsphinx.h:428
func GetNFrames(ps *Decoder) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_n_frames(cps)
	__v := (int32)(__ret)
	return __v
}

// EndUtt function as declared in pocketsphinx/pocketsphinx.h:437
func EndUtt(ps *Decoder) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_end_utt(cps)
	__v := (int32)(__ret)
	return __v
}

// GetHyp function as declared in pocketsphinx/pocketsphinx.h:449
func GetHyp(ps *Decoder, outBestScore []int32, outUttid []string) string {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutBestScore, _ := (*C.int32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&outBestScore)).Data)), cgoAllocsUnknown
	coutUttid, _ := unpackArgSString(outUttid)
	__ret := C.ps_get_hyp(cps, coutBestScore, coutUttid)
	packSString(outUttid, coutUttid)
	__v := packPCharString(__ret)
	return __v
}

// GetHypFinal function as declared in pocketsphinx/pocketsphinx.h:461
func GetHypFinal(ps *Decoder, outIsFinal *int32) string {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutIsFinal, _ := (*C.int32)(unsafe.Pointer(outIsFinal)), cgoAllocsUnknown
	__ret := C.ps_get_hyp_final(cps, coutIsFinal)
	__v := packPCharString(__ret)
	return __v
}

// GetProb function as declared in pocketsphinx/pocketsphinx.h:478
func GetProb(ps *Decoder, outUttid []string) int32 {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutUttid, _ := unpackArgSString(outUttid)
	__ret := C.ps_get_prob(cps, coutUttid)
	packSString(outUttid, coutUttid)
	__v := (int32)(__ret)
	return __v
}

// GetLattice function as declared in pocketsphinx/pocketsphinx.h:494
func GetLattice(ps *Decoder) *Lattice {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	__ret := C.ps_get_lattice(cps)
	__v := *(**Lattice)(unsafe.Pointer(&__ret))
	return __v
}

// SegIter function as declared in pocketsphinx/pocketsphinx.h:505
func SegIter(ps *Decoder, outBestScore *int32) *Seg {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutBestScore, _ := (*C.int32)(unsafe.Pointer(outBestScore)), cgoAllocsUnknown
	__ret := C.ps_seg_iter(cps, coutBestScore)
	__v := *(**Seg)(unsafe.Pointer(&__ret))
	return __v
}

// SegNext function as declared in pocketsphinx/pocketsphinx.h:515
func SegNext(seg *Seg) *Seg {
	cseg, _ := (*C.ps_seg_t)(unsafe.Pointer(seg)), cgoAllocsUnknown
	__ret := C.ps_seg_next(cseg)
	__v := *(**Seg)(unsafe.Pointer(&__ret))
	return __v
}

// SegWord function as declared in pocketsphinx/pocketsphinx.h:525
func SegWord(seg *Seg) string {
	cseg, _ := (*C.ps_seg_t)(unsafe.Pointer(seg)), cgoAllocsUnknown
	__ret := C.ps_seg_word(cseg)
	__v := packPCharString(__ret)
	return __v
}

// SegFrames function as declared in pocketsphinx/pocketsphinx.h:539
func SegFrames(seg *Seg, outSf *int32, outEf *int32) {
	cseg, _ := (*C.ps_seg_t)(unsafe.Pointer(seg)), cgoAllocsUnknown
	coutSf, _ := (*C.int)(unsafe.Pointer(outSf)), cgoAllocsUnknown
	coutEf, _ := (*C.int)(unsafe.Pointer(outEf)), cgoAllocsUnknown
	C.ps_seg_frames(cseg, coutSf, coutEf)
}

// SegProb function as declared in pocketsphinx/pocketsphinx.h:564
func SegProb(seg *Seg, outAscr *int32, outLscr *int32, outLback *int32) int32 {
	cseg, _ := (*C.ps_seg_t)(unsafe.Pointer(seg)), cgoAllocsUnknown
	coutAscr, _ := (*C.int32)(unsafe.Pointer(outAscr)), cgoAllocsUnknown
	coutLscr, _ := (*C.int32)(unsafe.Pointer(outLscr)), cgoAllocsUnknown
	coutLback, _ := (*C.int32)(unsafe.Pointer(outLback)), cgoAllocsUnknown
	__ret := C.ps_seg_prob(cseg, coutAscr, coutLscr, coutLback)
	__v := (int32)(__ret)
	return __v
}

// SegFree function as declared in pocketsphinx/pocketsphinx.h:570
func SegFree(seg *Seg) {
	cseg, _ := (*C.ps_seg_t)(unsafe.Pointer(seg)), cgoAllocsUnknown
	C.ps_seg_free(cseg)
}

// GetNbest function as declared in pocketsphinx/pocketsphinx.h:587
func GetNbest(ps *Decoder, sf int32, ef int32, ctx1 string, ctx2 string) *Nbest {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	csf, _ := (C.int)(sf), cgoAllocsUnknown
	cef, _ := (C.int)(ef), cgoAllocsUnknown
	cctx1, _ := unpackPCharString(ctx1)
	cctx2, _ := unpackPCharString(ctx2)
	__ret := C.ps_nbest(cps, csf, cef, cctx1, cctx2)
	__v := *(**Nbest)(unsafe.Pointer(&__ret))
	return __v
}

// NbestNext function as declared in pocketsphinx/pocketsphinx.h:598
func NbestNext(nbest *Nbest) *Nbest {
	cnbest, _ := (*C.ps_nbest_t)(unsafe.Pointer(nbest)), cgoAllocsUnknown
	__ret := C.ps_nbest_next(cnbest)
	__v := *(**Nbest)(unsafe.Pointer(&__ret))
	return __v
}

// NbestHyp function as declared in pocketsphinx/pocketsphinx.h:608
func NbestHyp(nbest *Nbest, outScore *int32) string {
	cnbest, _ := (*C.ps_nbest_t)(unsafe.Pointer(nbest)), cgoAllocsUnknown
	coutScore, _ := (*C.int32)(unsafe.Pointer(outScore)), cgoAllocsUnknown
	__ret := C.ps_nbest_hyp(cnbest, coutScore)
	__v := packPCharString(__ret)
	return __v
}

// NbestSeg function as declared in pocketsphinx/pocketsphinx.h:618
func NbestSeg(nbest *Nbest, outScore *int32) *Seg {
	cnbest, _ := (*C.ps_nbest_t)(unsafe.Pointer(nbest)), cgoAllocsUnknown
	coutScore, _ := (*C.int32)(unsafe.Pointer(outScore)), cgoAllocsUnknown
	__ret := C.ps_nbest_seg(cnbest, coutScore)
	__v := *(**Seg)(unsafe.Pointer(&__ret))
	return __v
}

// NbestFree function as declared in pocketsphinx/pocketsphinx.h:626
func NbestFree(nbest *Nbest) {
	cnbest, _ := (*C.ps_nbest_t)(unsafe.Pointer(nbest)), cgoAllocsUnknown
	C.ps_nbest_free(cnbest)
}

// GetUttTime function as declared in pocketsphinx/pocketsphinx.h:637
func GetUttTime(ps *Decoder, outNspeech *float64, outNcpu *float64, outNwall *float64) {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutNspeech, _ := (*C.double)(unsafe.Pointer(outNspeech)), cgoAllocsUnknown
	coutNcpu, _ := (*C.double)(unsafe.Pointer(outNcpu)), cgoAllocsUnknown
	coutNwall, _ := (*C.double)(unsafe.Pointer(outNwall)), cgoAllocsUnknown
	C.ps_get_utt_time(cps, coutNspeech, coutNcpu, coutNwall)
}

// GetAllTime function as declared in pocketsphinx/pocketsphinx.h:649
func GetAllTime(ps *Decoder, outNspeech *float64, outNcpu *float64, outNwall *float64) {
	cps, _ := (*C.ps_decoder_t)(unsafe.Pointer(ps)), cgoAllocsUnknown
	coutNspeech, _ := (*C.double)(unsafe.Pointer(outNspeech)), cgoAllocsUnknown
	coutNcpu, _ := (*C.double)(unsafe.Pointer(outNcpu)), cgoAllocsUnknown
	coutNwall, _ := (*C.double)(unsafe.Pointer(outNwall)), cgoAllocsUnknown
	C.ps_get_all_time(cps, coutNspeech, coutNcpu, coutNwall)
}

// CommandLnRetain function as declared in sphinxbase/cmd_ln.h:208
func CommandLnRetain(cmdln *CommandLn) *CommandLn {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	__ret := C.cmd_ln_retain(ccmdln)
	__v := *(**CommandLn)(unsafe.Pointer(&__ret))
	return __v
}

// CommandLnFreeR function as declared in sphinxbase/cmd_ln.h:216
func CommandLnFreeR(cmdln *CommandLn) int32 {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	__ret := C.cmd_ln_free_r(ccmdln)
	__v := (int32)(__ret)
	return __v
}

// CommandLnParseR function as declared in sphinxbase/cmd_ln.h:238
func CommandLnParseR(inoutCmdln *CommandLn, defn *Arg, argc int32, argv [][]byte, strict int32) *CommandLn {
	cinoutCmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(inoutCmdln)), cgoAllocsUnknown
	cdefn, _ := defn.PassRef()
	cargc, _ := (C.int32)(argc), cgoAllocsUnknown
	cargv, _ := unpackArgSSByte(argv)
	cstrict, _ := (C.int32)(strict), cgoAllocsUnknown
	__ret := C.cmd_ln_parse_r(cinoutCmdln, cdefn, cargc, cargv, cstrict)
	packSSByte(argv, cargv)
	__v := *(**CommandLn)(unsafe.Pointer(&__ret))
	return __v
}

// CommandLnParseFileR function as declared in sphinxbase/cmd_ln.h:254
func CommandLnParseFileR(inoutCmdln *CommandLn, defn *Arg, filename string, strict int32) *CommandLn {
	cinoutCmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(inoutCmdln)), cgoAllocsUnknown
	cdefn, _ := defn.PassRef()
	cfilename, _ := unpackPCharString(filename)
	cstrict, _ := (C.int32)(strict), cgoAllocsUnknown
	__ret := C.cmd_ln_parse_file_r(cinoutCmdln, cdefn, cfilename, cstrict)
	__v := *(**CommandLn)(unsafe.Pointer(&__ret))
	return __v
}

// CommandLnAccessR function as declared in sphinxbase/cmd_ln.h:267
func CommandLnAccessR(cmdln *CommandLn, name string) *Anytype {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_access_r(ccmdln, cname)
	__v := *(**Anytype)(unsafe.Pointer(&__ret))
	return __v
}

// CommandLnStrR function as declared in sphinxbase/cmd_ln.h:284
func CommandLnStrR(cmdln *CommandLn, name string) string {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_str_r(ccmdln, cname)
	__v := packPCharString(__ret)
	return __v
}

// CommandLnStrListR function as declared in sphinxbase/cmd_ln.h:301
func CommandLnStrListR(cmdln *CommandLn, name string) []string {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_str_list_r(ccmdln, cname)
	var __v []string
	packSString(__v, __ret)
	return __v
}

// CommandLnIntR function as declared in sphinxbase/cmd_ln.h:315
func CommandLnIntR(cmdln *CommandLn, name string) int {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_int_r(ccmdln, cname)
	__v := (int)(__ret)
	return __v
}

// CommandLnFloatR function as declared in sphinxbase/cmd_ln.h:329
func CommandLnFloatR(cmdln *CommandLn, name string) float64 {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_float_r(ccmdln, cname)
	__v := (float64)(__ret)
	return __v
}

// CommandLnSetStrR function as declared in sphinxbase/cmd_ln.h:345
func CommandLnSetStrR(cmdln *CommandLn, name string, str string) {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	cstr, _ := unpackPCharString(str)
	C.cmd_ln_set_str_r(ccmdln, cname, cstr)
}

// CommandLnSetIntR function as declared in sphinxbase/cmd_ln.h:355
func CommandLnSetIntR(cmdln *CommandLn, name string, iv int) {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	civ, _ := (C.long)(iv), cgoAllocsUnknown
	C.cmd_ln_set_int_r(ccmdln, cname, civ)
}

// CommandLnSetFloatR function as declared in sphinxbase/cmd_ln.h:365
func CommandLnSetFloatR(cmdln *CommandLn, name string, fv float64) {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	cfv, _ := (C.double)(fv), cgoAllocsUnknown
	C.cmd_ln_set_float_r(ccmdln, cname, cfv)
}

// CommandLnExistsR function as declared in sphinxbase/cmd_ln.h:389
func CommandLnExistsR(cmdln *CommandLn, name string) int32 {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.cmd_ln_exists_r(ccmdln, cname)
	__v := (int32)(__ret)
	return __v
}

// CommandLnPrintHelpR function as declared in sphinxbase/cmd_ln.h:396
func CommandLnPrintHelpR(cmdln *CommandLn, fp *File, defn *Arg) {
	ccmdln, _ := (*C.cmd_ln_t)(unsafe.Pointer(cmdln)), cgoAllocsUnknown
	cfp, _ := (*C.FILE)(unsafe.Pointer(fp)), cgoAllocsUnknown
	cdefn, _ := defn.PassRef()
	C.cmd_ln_print_help_r(ccmdln, cfp, cdefn)
}

// CommandLnParse function as declared in sphinxbase/cmd_ln.h:409
func CommandLnParse(defn *Arg, argc int32, argv [][]byte, strict int32) int32 {
	cdefn, _ := defn.PassRef()
	cargc, _ := (C.int32)(argc), cgoAllocsUnknown
	cargv, _ := unpackArgSSByte(argv)
	cstrict, _ := (C.int32)(strict), cgoAllocsUnknown
	__ret := C.cmd_ln_parse(cdefn, cargc, cargv, cstrict)
	packSSByte(argv, cargv)
	__v := (int32)(__ret)
	return __v
}

// CommandLnParseFile function as declared in sphinxbase/cmd_ln.h:426
func CommandLnParseFile(defn *Arg, filename string, strict int32) int32 {
	cdefn, _ := defn.PassRef()
	cfilename, _ := unpackPCharString(filename)
	cstrict, _ := (C.int32)(strict), cgoAllocsUnknown
	__ret := C.cmd_ln_parse_file(cdefn, cfilename, cstrict)
	__v := (int32)(__ret)
	return __v
}

// CommandLnApplEnter function as declared in sphinxbase/cmd_ln.h:438
func CommandLnApplEnter(argc int32, argv [][]byte, defaultArgfn string, defn *Arg) {
	cargc, _ := (C.int)(argc), cgoAllocsUnknown
	cargv, _ := unpackArgSSByte(argv)
	cdefaultArgfn, _ := unpackPCharString(defaultArgfn)
	cdefn, _ := defn.PassRef()
	C.cmd_ln_appl_enter(cargc, cargv, cdefaultArgfn, cdefn)
	packSSByte(argv, cargv)
}

// CommandLnApplExit function as declared in sphinxbase/cmd_ln.h:452
func CommandLnApplExit() {
	C.cmd_ln_appl_exit()
}

// CommandLnGet function as declared in sphinxbase/cmd_ln.h:461
func CommandLnGet() *CommandLn {
	__ret := C.cmd_ln_get()
	__v := *(**CommandLn)(unsafe.Pointer(&__ret))
	return __v
}

// CommandLnFree function as declared in sphinxbase/cmd_ln.h:578
func CommandLnFree() {
	C.cmd_ln_free()
}

// LogmathInit function as declared in sphinxbase/logmath.h:123
func LogmathInit(base float64, shift int32, useTable int32) *Logmath {
	cbase, _ := (C.float64)(base), cgoAllocsUnknown
	cshift, _ := (C.int)(shift), cgoAllocsUnknown
	cuseTable, _ := (C.int)(useTable), cgoAllocsUnknown
	__ret := C.logmath_init(cbase, cshift, cuseTable)
	__v := *(**Logmath)(unsafe.Pointer(&__ret))
	return __v
}

// LogmathRead function as declared in sphinxbase/logmath.h:129
func LogmathRead(filename string) *Logmath {
	cfilename, _ := unpackPCharString(filename)
	__ret := C.logmath_read(cfilename)
	__v := *(**Logmath)(unsafe.Pointer(&__ret))
	return __v
}

// LogmathWrite function as declared in sphinxbase/logmath.h:135
func LogmathWrite(lmath *Logmath, filename string) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	cfilename, _ := unpackPCharString(filename)
	__ret := C.logmath_write(clmath, cfilename)
	__v := (int32)(__ret)
	return __v
}

// LogmathGetTableShape function as declared in sphinxbase/logmath.h:141
func LogmathGetTableShape(lmath *Logmath, outSize *uint32, outWidth *uint32, outShift *uint32) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	coutSize, _ := (*C.uint32)(unsafe.Pointer(outSize)), cgoAllocsUnknown
	coutWidth, _ := (*C.uint32)(unsafe.Pointer(outWidth)), cgoAllocsUnknown
	coutShift, _ := (*C.uint32)(unsafe.Pointer(outShift)), cgoAllocsUnknown
	__ret := C.logmath_get_table_shape(clmath, coutSize, coutWidth, coutShift)
	__v := (int32)(__ret)
	return __v
}

// LogmathGetBase function as declared in sphinxbase/logmath.h:148
func LogmathGetBase(lmath *Logmath) float64 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_get_base(clmath)
	__v := (float64)(__ret)
	return __v
}

// LogmathGetZero function as declared in sphinxbase/logmath.h:154
func LogmathGetZero(lmath *Logmath) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_get_zero(clmath)
	__v := (int32)(__ret)
	return __v
}

// LogmathGetWidth function as declared in sphinxbase/logmath.h:160
func LogmathGetWidth(lmath *Logmath) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_get_width(clmath)
	__v := (int32)(__ret)
	return __v
}

// LogmathGetShift function as declared in sphinxbase/logmath.h:166
func LogmathGetShift(lmath *Logmath) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_get_shift(clmath)
	__v := (int32)(__ret)
	return __v
}

// LogmathRetain function as declared in sphinxbase/logmath.h:174
func LogmathRetain(lmath *Logmath) *Logmath {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_retain(clmath)
	__v := *(**Logmath)(unsafe.Pointer(&__ret))
	return __v
}

// LogmathFree function as declared in sphinxbase/logmath.h:182
func LogmathFree(lmath *Logmath) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.logmath_free(clmath)
	__v := (int32)(__ret)
	return __v
}

// LogmathAddExact function as declared in sphinxbase/logmath.h:188
func LogmathAddExact(lmath *Logmath, logbP int32, logbQ int32) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogbP, _ := (C.int)(logbP), cgoAllocsUnknown
	clogbQ, _ := (C.int)(logbQ), cgoAllocsUnknown
	__ret := C.logmath_add_exact(clmath, clogbP, clogbQ)
	__v := (int32)(__ret)
	return __v
}

// LogmathAdd function as declared in sphinxbase/logmath.h:194
func LogmathAdd(lmath *Logmath, logbP int32, logbQ int32) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogbP, _ := (C.int)(logbP), cgoAllocsUnknown
	clogbQ, _ := (C.int)(logbQ), cgoAllocsUnknown
	__ret := C.logmath_add(clmath, clogbP, clogbQ)
	__v := (int32)(__ret)
	return __v
}

// LogmathLog function as declared in sphinxbase/logmath.h:200
func LogmathLog(lmath *Logmath, p float64) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	cp, _ := (C.float64)(p), cgoAllocsUnknown
	__ret := C.logmath_log(clmath, cp)
	__v := (int32)(__ret)
	return __v
}

// LogmathExp function as declared in sphinxbase/logmath.h:206
func LogmathExp(lmath *Logmath, logbP int32) float64 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogbP, _ := (C.int)(logbP), cgoAllocsUnknown
	__ret := C.logmath_exp(clmath, clogbP)
	__v := (float64)(__ret)
	return __v
}

// LogmathLnToLog function as declared in sphinxbase/logmath.h:212
func LogmathLnToLog(lmath *Logmath, logP float64) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogP, _ := (C.float64)(logP), cgoAllocsUnknown
	__ret := C.logmath_ln_to_log(clmath, clogP)
	__v := (int32)(__ret)
	return __v
}

// LogmathLogToLn function as declared in sphinxbase/logmath.h:218
func LogmathLogToLn(lmath *Logmath, logbP int32) float64 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogbP, _ := (C.int)(logbP), cgoAllocsUnknown
	__ret := C.logmath_log_to_ln(clmath, clogbP)
	__v := (float64)(__ret)
	return __v
}

// LogmathLog10ToLog function as declared in sphinxbase/logmath.h:224
func LogmathLog10ToLog(lmath *Logmath, logP float64) int32 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogP, _ := (C.float64)(logP), cgoAllocsUnknown
	__ret := C.logmath_log10_to_log(clmath, clogP)
	__v := (int32)(__ret)
	return __v
}

// LogmathLogToLog10 function as declared in sphinxbase/logmath.h:230
func LogmathLogToLog10(lmath *Logmath, logbP int32) float64 {
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clogbP, _ := (C.int)(logbP), cgoAllocsUnknown
	__ret := C.logmath_log_to_log10(clmath, clogbP)
	__v := (float64)(__ret)
	return __v
}

// NgramModelRead function as declared in sphinxbase/ngram_model.h:107
func NgramModelRead(config *CommandLn, fileName string, fileType NgramFileType, lmath *Logmath) *NgramModel {
	cconfig, _ := (*C.cmd_ln_t)(unsafe.Pointer(config)), cgoAllocsUnknown
	cfileName, _ := unpackPCharString(fileName)
	cfileType, _ := (C.ngram_file_type_t)(fileType), cgoAllocsUnknown
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.ngram_model_read(cconfig, cfileName, cfileType, clmath)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelWrite function as declared in sphinxbase/ngram_model.h:118
func NgramModelWrite(model *NgramModel, fileName string, format NgramFileType) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cfileName, _ := unpackPCharString(fileName)
	cformat, _ := (C.ngram_file_type_t)(format), cgoAllocsUnknown
	__ret := C.ngram_model_write(cmodel, cfileName, cformat)
	__v := (int32)(__ret)
	return __v
}

// NgramFileNameToType function as declared in sphinxbase/ngram_model.h:127
func NgramFileNameToType(fileName string) NgramFileType {
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ngram_file_name_to_type(cfileName)
	__v := (NgramFileType)(__ret)
	return __v
}

// NgramStrToType function as declared in sphinxbase/ngram_model.h:135
func NgramStrToType(strName string) NgramFileType {
	cstrName, _ := unpackPCharString(strName)
	__ret := C.ngram_str_to_type(cstrName)
	__v := (NgramFileType)(__ret)
	return __v
}

// NgramTypeToStr function as declared in sphinxbase/ngram_model.h:144
func NgramTypeToStr(kind int32) string {
	ckind, _ := (C.int)(kind), cgoAllocsUnknown
	__ret := C.ngram_type_to_str(ckind)
	__v := packPCharString(__ret)
	return __v
}

// NgramModelRetain function as declared in sphinxbase/ngram_model.h:152
func NgramModelRetain(model *NgramModel) *NgramModel {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_model_retain(cmodel)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelFree function as declared in sphinxbase/ngram_model.h:160
func NgramModelFree(model *NgramModel) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_model_free(cmodel)
	__v := (int32)(__ret)
	return __v
}

// NgramModelRecode function as declared in sphinxbase/ngram_model.h:179
func NgramModelRecode(model *NgramModel, from string, to string) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cfrom, _ := unpackPCharString(from)
	cto, _ := unpackPCharString(to)
	__ret := C.ngram_model_recode(cmodel, cfrom, cto)
	__v := (int32)(__ret)
	return __v
}

// NgramModelCasefold function as declared in sphinxbase/ngram_model.h:196
func NgramModelCasefold(model *NgramModel, kase int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	ckase, _ := (C.int)(kase), cgoAllocsUnknown
	__ret := C.ngram_model_casefold(cmodel, ckase)
	__v := (int32)(__ret)
	return __v
}

// NgramModelApplyWeights function as declared in sphinxbase/ngram_model.h:210
func NgramModelApplyWeights(model *NgramModel, lw float32, wip float32, uw float32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	clw, _ := (C.float32)(lw), cgoAllocsUnknown
	cwip, _ := (C.float32)(wip), cgoAllocsUnknown
	cuw, _ := (C.float32)(uw), cgoAllocsUnknown
	__ret := C.ngram_model_apply_weights(cmodel, clw, cwip, cuw)
	__v := (int32)(__ret)
	return __v
}

// NgramModelGetWeights function as declared in sphinxbase/ngram_model.h:222
func NgramModelGetWeights(model *NgramModel, outLogWip *int32, outLogUw *int32) float32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	coutLogWip, _ := (*C.int32)(unsafe.Pointer(outLogWip)), cgoAllocsUnknown
	coutLogUw, _ := (*C.int32)(unsafe.Pointer(outLogUw)), cgoAllocsUnknown
	__ret := C.ngram_model_get_weights(cmodel, coutLogWip, coutLogUw)
	__v := (float32)(__ret)
	return __v
}

// NgramTgScore function as declared in sphinxbase/ngram_model.h:264
func NgramTgScore(model *NgramModel, w3 int32, w2 int32, w1 int32, nUsed []int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cw3, _ := (C.int32)(w3), cgoAllocsUnknown
	cw2, _ := (C.int32)(w2), cgoAllocsUnknown
	cw1, _ := (C.int32)(w1), cgoAllocsUnknown
	cnUsed, _ := (*C.int32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nUsed)).Data)), cgoAllocsUnknown
	__ret := C.ngram_tg_score(cmodel, cw3, cw2, cw1, cnUsed)
	__v := (int32)(__ret)
	return __v
}

// NgramBgScore function as declared in sphinxbase/ngram_model.h:272
func NgramBgScore(model *NgramModel, w2 int32, w1 int32, nUsed *int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cw2, _ := (C.int32)(w2), cgoAllocsUnknown
	cw1, _ := (C.int32)(w1), cgoAllocsUnknown
	cnUsed, _ := (*C.int32)(unsafe.Pointer(nUsed)), cgoAllocsUnknown
	__ret := C.ngram_bg_score(cmodel, cw2, cw1, cnUsed)
	__v := (int32)(__ret)
	return __v
}

// NgramNgScore function as declared in sphinxbase/ngram_model.h:280
func NgramNgScore(model *NgramModel, wid int32, history *int32, nHist int32, nUsed []int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	chistory, _ := (*C.int32)(unsafe.Pointer(history)), cgoAllocsUnknown
	cnHist, _ := (C.int32)(nHist), cgoAllocsUnknown
	cnUsed, _ := (*C.int32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nUsed)).Data)), cgoAllocsUnknown
	__ret := C.ngram_ng_score(cmodel, cwid, chistory, cnHist, cnUsed)
	__v := (int32)(__ret)
	return __v
}

// NgramNgProb function as declared in sphinxbase/ngram_model.h:303
func NgramNgProb(model *NgramModel, wid int32, history *int32, nHist int32, nUsed []int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	chistory, _ := (*C.int32)(unsafe.Pointer(history)), cgoAllocsUnknown
	cnHist, _ := (C.int32)(nHist), cgoAllocsUnknown
	cnUsed, _ := (*C.int32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nUsed)).Data)), cgoAllocsUnknown
	__ret := C.ngram_ng_prob(cmodel, cwid, chistory, cnHist, cnUsed)
	__v := (int32)(__ret)
	return __v
}

// NgramScoreToProb function as declared in sphinxbase/ngram_model.h:318
func NgramScoreToProb(model *NgramModel, score int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cscore, _ := (C.int32)(score), cgoAllocsUnknown
	__ret := C.ngram_score_to_prob(cmodel, cscore)
	__v := (int32)(__ret)
	return __v
}

// NgramWid function as declared in sphinxbase/ngram_model.h:324
func NgramWid(model *NgramModel, word string) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cword, _ := unpackPCharString(word)
	__ret := C.ngram_wid(cmodel, cword)
	__v := (int32)(__ret)
	return __v
}

// NgramWord function as declared in sphinxbase/ngram_model.h:330
func NgramWord(model *NgramModel, wid int32) string {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	__ret := C.ngram_word(cmodel, cwid)
	__v := packPCharString(__ret)
	return __v
}

// NgramUnknownWid function as declared in sphinxbase/ngram_model.h:346
func NgramUnknownWid(model *NgramModel) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_unknown_wid(cmodel)
	__v := (int32)(__ret)
	return __v
}

// NgramZero function as declared in sphinxbase/ngram_model.h:352
func NgramZero(model *NgramModel) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_zero(cmodel)
	__v := (int32)(__ret)
	return __v
}

// NgramModelGetSize function as declared in sphinxbase/ngram_model.h:358
func NgramModelGetSize(model *NgramModel) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_model_get_size(cmodel)
	__v := (int32)(__ret)
	return __v
}

// NgramModelGetCounts function as declared in sphinxbase/ngram_model.h:364
func NgramModelGetCounts(model *NgramModel) *int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	__ret := C.ngram_model_get_counts(cmodel)
	__v := *(**int32)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelMgrams function as declared in sphinxbase/ngram_model.h:380
func NgramModelMgrams(model *NgramModel, m int32) *NgramIter {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cm, _ := (C.int)(m), cgoAllocsUnknown
	__ret := C.ngram_model_mgrams(cmodel, cm)
	__v := *(**NgramIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramNgIter function as declared in sphinxbase/ngram_model.h:392
func NgramNgIter(model *NgramModel, wid int32, history []int32, nHist int32) *NgramIter {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	chistory, _ := (*C.int32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&history)).Data)), cgoAllocsUnknown
	cnHist, _ := (C.int32)(nHist), cgoAllocsUnknown
	__ret := C.ngram_ng_iter(cmodel, cwid, chistory, cnHist)
	__v := *(**NgramIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramIterGet function as declared in sphinxbase/ngram_model.h:403
func NgramIterGet(itor *NgramIter, outScore *int32, outBowt *int32) *int32 {
	citor, _ := (*C.ngram_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	coutScore, _ := (*C.int32)(unsafe.Pointer(outScore)), cgoAllocsUnknown
	coutBowt, _ := (*C.int32)(unsafe.Pointer(outBowt)), cgoAllocsUnknown
	__ret := C.ngram_iter_get(citor, coutScore, coutBowt)
	__v := *(**int32)(unsafe.Pointer(&__ret))
	return __v
}

// NgramIterSuccessors function as declared in sphinxbase/ngram_model.h:413
func NgramIterSuccessors(itor *NgramIter) *NgramIter {
	citor, _ := (*C.ngram_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ngram_iter_successors(citor)
	__v := *(**NgramIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramIterNext function as declared in sphinxbase/ngram_model.h:419
func NgramIterNext(itor *NgramIter) *NgramIter {
	citor, _ := (*C.ngram_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ngram_iter_next(citor)
	__v := *(**NgramIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramIterFree function as declared in sphinxbase/ngram_model.h:425
func NgramIterFree(itor *NgramIter) {
	citor, _ := (*C.ngram_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	C.ngram_iter_free(citor)
}

// NgramModelAddWord function as declared in sphinxbase/ngram_model.h:440
func NgramModelAddWord(model *NgramModel, word string, weight float32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cword, _ := unpackPCharString(word)
	cweight, _ := (C.float32)(weight), cgoAllocsUnknown
	__ret := C.ngram_model_add_word(cmodel, cword, cweight)
	__v := (int32)(__ret)
	return __v
}

// NgramModelReadClassdef function as declared in sphinxbase/ngram_model.h:457
func NgramModelReadClassdef(model *NgramModel, fileName string) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ngram_model_read_classdef(cmodel, cfileName)
	__v := (int32)(__ret)
	return __v
}

// NgramModelAddClass function as declared in sphinxbase/ngram_model.h:469
func NgramModelAddClass(model *NgramModel, classname string, classweight float32, words [][]byte, weights []float32, nWords int32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cclassname, _ := unpackPCharString(classname)
	cclassweight, _ := (C.float32)(classweight), cgoAllocsUnknown
	cwords, _ := unpackArgSSByte(words)
	cweights, _ := (*C.float32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&weights)).Data)), cgoAllocsUnknown
	cnWords, _ := (C.int32)(nWords), cgoAllocsUnknown
	__ret := C.ngram_model_add_class(cmodel, cclassname, cclassweight, cwords, cweights, cnWords)
	packSSByte(words, cwords)
	__v := (int32)(__ret)
	return __v
}

// NgramModelAddClassWord function as declared in sphinxbase/ngram_model.h:486
func NgramModelAddClassWord(model *NgramModel, classname string, word string, weight float32) int32 {
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cclassname, _ := unpackPCharString(classname)
	cword, _ := unpackPCharString(word)
	cweight, _ := (C.float32)(weight), cgoAllocsUnknown
	__ret := C.ngram_model_add_class_word(cmodel, cclassname, cword, cweight)
	__v := (int32)(__ret)
	return __v
}

// NgramModelSetInit function as declared in sphinxbase/ngram_model.h:516
func NgramModelSetInit(config *CommandLn, models []*NgramModel, names [][]byte, weights []float32, nModels int32) *NgramModel {
	cconfig, _ := (*C.cmd_ln_t)(unsafe.Pointer(config)), cgoAllocsUnknown
	cmodels, _ := (**C.ngram_model_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&models)).Data)), cgoAllocsUnknown
	cnames, _ := unpackArgSSByte(names)
	cweights, _ := (*C.float32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&weights)).Data)), cgoAllocsUnknown
	cnModels, _ := (C.int32)(nModels), cgoAllocsUnknown
	__ret := C.ngram_model_set_init(cconfig, cmodels, cnames, cweights, cnModels)
	packSSByte(names, cnames)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetRead function as declared in sphinxbase/ngram_model.h:553
func NgramModelSetRead(config *CommandLn, lmctlfile string, lmath *Logmath) *NgramModel {
	cconfig, _ := (*C.cmd_ln_t)(unsafe.Pointer(config)), cgoAllocsUnknown
	clmctlfile, _ := unpackPCharString(lmctlfile)
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	__ret := C.ngram_model_set_read(cconfig, clmctlfile, clmath)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetCount function as declared in sphinxbase/ngram_model.h:561
func NgramModelSetCount(set *NgramModel) int32 {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	__ret := C.ngram_model_set_count(cset)
	__v := (int32)(__ret)
	return __v
}

// NgramModelGetSetIter function as declared in sphinxbase/ngram_model.h:574
func NgramModelGetSetIter(set *NgramModel) *NgramModelSetIter {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	__ret := C.ngram_model_set_iter(cset)
	__v := *(**NgramModelSetIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetIterNext function as declared in sphinxbase/ngram_model.h:582
func NgramModelSetIterNext(itor *NgramModelSetIter) *NgramModelSetIter {
	citor, _ := (*C.ngram_model_set_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ngram_model_set_iter_next(citor)
	__v := *(**NgramModelSetIter)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetIterFree function as declared in sphinxbase/ngram_model.h:588
func NgramModelSetIterFree(itor *NgramModelSetIter) {
	citor, _ := (*C.ngram_model_set_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	C.ngram_model_set_iter_free(citor)
}

// NgramModelSetIterModel function as declared in sphinxbase/ngram_model.h:598
func NgramModelSetIterModel(itor *NgramModelSetIter, lmname []string) *NgramModel {
	citor, _ := (*C.ngram_model_set_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	clmname, _ := unpackArgSString(lmname)
	__ret := C.ngram_model_set_iter_model(citor, clmname)
	packSString(lmname, clmname)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetSelect function as declared in sphinxbase/ngram_model.h:608
func NgramModelSetSelect(set *NgramModel, name string) *NgramModel {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.ngram_model_set_select(cset, cname)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetLookup function as declared in sphinxbase/ngram_model.h:618
func NgramModelSetLookup(set *NgramModel, name string) *NgramModel {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.ngram_model_set_lookup(cset, cname)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetCurrent function as declared in sphinxbase/ngram_model.h:625
func NgramModelSetCurrent(set *NgramModel) string {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	__ret := C.ngram_model_set_current(cset)
	__v := packPCharString(__ret)
	return __v
}

// NgramModelSetInterp function as declared in sphinxbase/ngram_model.h:635
func NgramModelSetInterp(set *NgramModel, names []string, weights []float32) *NgramModel {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cnames, _ := unpackArgSString(names)
	cweights, _ := (*C.float32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&weights)).Data)), cgoAllocsUnknown
	__ret := C.ngram_model_set_interp(cset, cnames, cweights)
	packSString(names, cnames)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetAdd function as declared in sphinxbase/ngram_model.h:652
func NgramModelSetAdd(set *NgramModel, model *NgramModel, name string, weight float32, reuseWidmap int32) *NgramModel {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cmodel, _ := (*C.ngram_model_t)(unsafe.Pointer(model)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	cweight, _ := (C.float32)(weight), cgoAllocsUnknown
	creuseWidmap, _ := (C.int)(reuseWidmap), cgoAllocsUnknown
	__ret := C.ngram_model_set_add(cset, cmodel, cname, cweight, creuseWidmap)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetRemove function as declared in sphinxbase/ngram_model.h:667
func NgramModelSetRemove(set *NgramModel, name string, reuseWidmap int32) *NgramModel {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	creuseWidmap, _ := (C.int)(reuseWidmap), cgoAllocsUnknown
	__ret := C.ngram_model_set_remove(cset, cname, creuseWidmap)
	__v := *(**NgramModel)(unsafe.Pointer(&__ret))
	return __v
}

// NgramModelSetMapWords function as declared in sphinxbase/ngram_model.h:675
func NgramModelSetMapWords(set *NgramModel, words []string, nWords int32) {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	cwords, _ := unpackArgSString(words)
	cnWords, _ := (C.int32)(nWords), cgoAllocsUnknown
	C.ngram_model_set_map_words(cset, cwords, cnWords)
	packSString(words, cwords)
}

// NgramModelSetCurrentWid function as declared in sphinxbase/ngram_model.h:687
func NgramModelSetCurrentWid(set *NgramModel, setWid int32) int32 {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	csetWid, _ := (C.int32)(setWid), cgoAllocsUnknown
	__ret := C.ngram_model_set_current_wid(cset, csetWid)
	__v := (int32)(__ret)
	return __v
}

// NgramModelSetKnownWid function as declared in sphinxbase/ngram_model.h:700
func NgramModelSetKnownWid(set *NgramModel, setWid int32) int32 {
	cset, _ := (*C.ngram_model_t)(unsafe.Pointer(set)), cgoAllocsUnknown
	csetWid, _ := (C.int32)(setWid), cgoAllocsUnknown
	__ret := C.ngram_model_set_known_wid(cset, csetWid)
	__v := (int32)(__ret)
	return __v
}

// NgramModelFlush function as declared in sphinxbase/ngram_model.h:710
func NgramModelFlush(lm *NgramModel) {
	clm, _ := (*C.ngram_model_t)(unsafe.Pointer(lm)), cgoAllocsUnknown
	C.ngram_model_flush(clm)
}

// LatticeRetain function as declared in pocketsphinx/ps_lattice.h:107
func LatticeRetain(dag *Lattice) *Lattice {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	__ret := C.ps_lattice_retain(cdag)
	__v := *(**Lattice)(unsafe.Pointer(&__ret))
	return __v
}

// LatticeFree function as declared in pocketsphinx/ps_lattice.h:115
func LatticeFree(dag *Lattice) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	__ret := C.ps_lattice_free(cdag)
	__v := (int32)(__ret)
	return __v
}

// LatticeWrite function as declared in pocketsphinx/ps_lattice.h:123
func LatticeWrite(dag *Lattice, filename string) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cfilename, _ := unpackPCharString(filename)
	__ret := C.ps_lattice_write(cdag, cfilename)
	__v := (int32)(__ret)
	return __v
}

// LatticeWriteHtk function as declared in pocketsphinx/ps_lattice.h:131
func LatticeWriteHtk(dag *Lattice, filename string) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cfilename, _ := unpackPCharString(filename)
	__ret := C.ps_lattice_write_htk(cdag, cfilename)
	__v := (int32)(__ret)
	return __v
}

// LatticeGetLogmath function as declared in pocketsphinx/ps_lattice.h:142
func LatticeGetLogmath(dag *Lattice) *Logmath {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	__ret := C.ps_lattice_get_logmath(cdag)
	__v := *(**Logmath)(unsafe.Pointer(&__ret))
	return __v
}

// GetLatnodeIter function as declared in pocketsphinx/ps_lattice.h:155
func GetLatnodeIter(dag *Lattice) *LatnodeIter {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	__ret := C.ps_latnode_iter(cdag)
	__v := *(**LatnodeIter)(unsafe.Pointer(&__ret))
	return __v
}

// LatnodeIterNext function as declared in pocketsphinx/ps_lattice.h:163
func LatnodeIterNext(itor *LatnodeIter) *LatnodeIter {
	citor, _ := (*C.ps_latnode_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ps_latnode_iter_next(citor)
	__v := *(**LatnodeIter)(unsafe.Pointer(&__ret))
	return __v
}

// LatnodeIterFree function as declared in pocketsphinx/ps_lattice.h:170
func LatnodeIterFree(itor *LatnodeIter) {
	citor, _ := (*C.ps_latnode_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	C.ps_latnode_iter_free(citor)
}

// LatnodeIterNode function as declared in pocketsphinx/ps_lattice.h:176
func LatnodeIterNode(itor *LatnodeIter) *Latnode {
	citor, _ := (*C.ps_latnode_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ps_latnode_iter_node(citor)
	__v := *(**Latnode)(unsafe.Pointer(&__ret))
	return __v
}

// LatnodeTimes function as declared in pocketsphinx/ps_lattice.h:187
func LatnodeTimes(node *Latnode, outFef *int16, outLef *int16) int32 {
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	coutFef, _ := (*C.int16)(unsafe.Pointer(outFef)), cgoAllocsUnknown
	coutLef, _ := (*C.int16)(unsafe.Pointer(outLef)), cgoAllocsUnknown
	__ret := C.ps_latnode_times(cnode, coutFef, coutLef)
	__v := (int32)(__ret)
	return __v
}

// LatnodeWord function as declared in pocketsphinx/ps_lattice.h:197
func LatnodeWord(dag *Lattice, node *Latnode) string {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	__ret := C.ps_latnode_word(cdag, cnode)
	__v := packPCharString(__ret)
	return __v
}

// LatnodeBaseword function as declared in pocketsphinx/ps_lattice.h:207
func LatnodeBaseword(dag *Lattice, node *Latnode) string {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	__ret := C.ps_latnode_baseword(cdag, cnode)
	__v := packPCharString(__ret)
	return __v
}

// LatnodeExits function as declared in pocketsphinx/ps_lattice.h:216
func LatnodeExits(node *Latnode) *LatlinkIter {
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	__ret := C.ps_latnode_exits(cnode)
	__v := *(**LatlinkIter)(unsafe.Pointer(&__ret))
	return __v
}

// LatnodeEntries function as declared in pocketsphinx/ps_lattice.h:225
func LatnodeEntries(node *Latnode) *LatlinkIter {
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	__ret := C.ps_latnode_entries(cnode)
	__v := *(**LatlinkIter)(unsafe.Pointer(&__ret))
	return __v
}

// LatnodeProb function as declared in pocketsphinx/ps_lattice.h:239
func LatnodeProb(dag *Lattice, node *Latnode, outLink **Latlink) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cnode, _ := (*C.ps_latnode_t)(unsafe.Pointer(node)), cgoAllocsUnknown
	coutLink, _ := (**C.ps_latlink_t)(unsafe.Pointer(outLink)), cgoAllocsUnknown
	__ret := C.ps_latnode_prob(cdag, cnode, coutLink)
	__v := (int32)(__ret)
	return __v
}

// LatlinkIterNext function as declared in pocketsphinx/ps_lattice.h:249
func LatlinkIterNext(itor *LatlinkIter) *LatlinkIter {
	citor, _ := (*C.ps_latlink_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ps_latlink_iter_next(citor)
	__v := *(**LatlinkIter)(unsafe.Pointer(&__ret))
	return __v
}

// LatlinkIterFree function as declared in pocketsphinx/ps_lattice.h:256
func LatlinkIterFree(itor *LatlinkIter) {
	citor, _ := (*C.ps_latlink_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	C.ps_latlink_iter_free(citor)
}

// LatlinkIterLink function as declared in pocketsphinx/ps_lattice.h:262
func LatlinkIterLink(itor *LatlinkIter) *Latlink {
	citor, _ := (*C.ps_latlink_iter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.ps_latlink_iter_link(citor)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatlinkTimes function as declared in pocketsphinx/ps_lattice.h:275
func LatlinkTimes(link *Latlink, outSf *int16) int32 {
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	coutSf, _ := (*C.int16)(unsafe.Pointer(outSf)), cgoAllocsUnknown
	__ret := C.ps_latlink_times(clink, coutSf)
	__v := (int32)(__ret)
	return __v
}

// LatlinkNodes function as declared in pocketsphinx/ps_lattice.h:285
func LatlinkNodes(link *Latlink, outSrc **Latnode) *Latnode {
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	coutSrc, _ := (**C.ps_latnode_t)(unsafe.Pointer(outSrc)), cgoAllocsUnknown
	__ret := C.ps_latlink_nodes(clink, coutSrc)
	__v := *(**Latnode)(unsafe.Pointer(&__ret))
	return __v
}

// LatlinkWord function as declared in pocketsphinx/ps_lattice.h:295
func LatlinkWord(dag *Lattice, link *Latlink) string {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	__ret := C.ps_latlink_word(cdag, clink)
	__v := packPCharString(__ret)
	return __v
}

// LatlinkBaseword function as declared in pocketsphinx/ps_lattice.h:305
func LatlinkBaseword(dag *Lattice, link *Latlink) string {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	__ret := C.ps_latlink_baseword(cdag, clink)
	__v := packPCharString(__ret)
	return __v
}

// LatlinkPred function as declared in pocketsphinx/ps_lattice.h:314
func LatlinkPred(link *Latlink) *Latlink {
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	__ret := C.ps_latlink_pred(clink)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatlinkProb function as declared in pocketsphinx/ps_lattice.h:327
func LatlinkProb(dag *Lattice, link *Latlink, outAscr *int32) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	clink, _ := (*C.ps_latlink_t)(unsafe.Pointer(link)), cgoAllocsUnknown
	coutAscr, _ := (*C.int32)(unsafe.Pointer(outAscr)), cgoAllocsUnknown
	__ret := C.ps_latlink_prob(cdag, clink, coutAscr)
	__v := (int32)(__ret)
	return __v
}

// LatticeLink function as declared in pocketsphinx/ps_lattice.h:334
func LatticeLink(dag *Lattice, from *Latnode, to *Latnode, score int32, ef int32) {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cfrom, _ := (*C.ps_latnode_t)(unsafe.Pointer(from)), cgoAllocsUnknown
	cto, _ := (*C.ps_latnode_t)(unsafe.Pointer(to)), cgoAllocsUnknown
	cscore, _ := (C.int32)(score), cgoAllocsUnknown
	cef, _ := (C.int32)(ef), cgoAllocsUnknown
	C.ps_lattice_link(cdag, cfrom, cto, cscore, cef)
}

// LatticeTraverseEdges function as declared in pocketsphinx/ps_lattice.h:353
func LatticeTraverseEdges(dag *Lattice, start *Latnode, end *Latnode) *Latlink {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cstart, _ := (*C.ps_latnode_t)(unsafe.Pointer(start)), cgoAllocsUnknown
	cend, _ := (*C.ps_latnode_t)(unsafe.Pointer(end)), cgoAllocsUnknown
	__ret := C.ps_lattice_traverse_edges(cdag, cstart, cend)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatticeTraverseNext function as declared in pocketsphinx/ps_lattice.h:363
func LatticeTraverseNext(dag *Lattice, end *Latnode) *Latlink {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cend, _ := (*C.ps_latnode_t)(unsafe.Pointer(end)), cgoAllocsUnknown
	__ret := C.ps_lattice_traverse_next(cdag, cend)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatticeReverseEdges function as declared in pocketsphinx/ps_lattice.h:376
func LatticeReverseEdges(dag *Lattice, start *Latnode, end *Latnode) *Latlink {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cstart, _ := (*C.ps_latnode_t)(unsafe.Pointer(start)), cgoAllocsUnknown
	cend, _ := (*C.ps_latnode_t)(unsafe.Pointer(end)), cgoAllocsUnknown
	__ret := C.ps_lattice_reverse_edges(cdag, cstart, cend)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatticeReverseNext function as declared in pocketsphinx/ps_lattice.h:386
func LatticeReverseNext(dag *Lattice, start *Latnode) *Latlink {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cstart, _ := (*C.ps_latnode_t)(unsafe.Pointer(start)), cgoAllocsUnknown
	__ret := C.ps_lattice_reverse_next(cdag, cstart)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatticeBestpath function as declared in pocketsphinx/ps_lattice.h:397
func LatticeBestpath(dag *Lattice, lmset *NgramModel, lwf float32, ascale float32) *Latlink {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	clmset, _ := (*C.ngram_model_t)(unsafe.Pointer(lmset)), cgoAllocsUnknown
	clwf, _ := (C.float32)(lwf), cgoAllocsUnknown
	cascale, _ := (C.float32)(ascale), cgoAllocsUnknown
	__ret := C.ps_lattice_bestpath(cdag, clmset, clwf, cascale)
	__v := *(**Latlink)(unsafe.Pointer(&__ret))
	return __v
}

// LatticePosterior function as declared in pocketsphinx/ps_lattice.h:408
func LatticePosterior(dag *Lattice, lmset *NgramModel, ascale float32) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	clmset, _ := (*C.ngram_model_t)(unsafe.Pointer(lmset)), cgoAllocsUnknown
	cascale, _ := (C.float32)(ascale), cgoAllocsUnknown
	__ret := C.ps_lattice_posterior(cdag, clmset, cascale)
	__v := (int32)(__ret)
	return __v
}

// LatticePosteriorPrune function as declared in pocketsphinx/ps_lattice.h:423
func LatticePosteriorPrune(dag *Lattice, beam int32) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	cbeam, _ := (C.int32)(beam), cgoAllocsUnknown
	__ret := C.ps_lattice_posterior_prune(cdag, cbeam)
	__v := (int32)(__ret)
	return __v
}

// LatticeNFrames function as declared in pocketsphinx/ps_lattice.h:443
func LatticeNFrames(dag *Lattice) int32 {
	cdag, _ := (*C.ps_lattice_t)(unsafe.Pointer(dag)), cgoAllocsUnknown
	__ret := C.ps_lattice_n_frames(cdag)
	__v := (int32)(__ret)
	return __v
}

// MllrRead function as declared in pocketsphinx/ps_mllr.h:61
func MllrRead(file string) *Mllr {
	cfile, _ := unpackPCharString(file)
	__ret := C.ps_mllr_read(cfile)
	__v := *(**Mllr)(unsafe.Pointer(&__ret))
	return __v
}

// MllrRetain function as declared in pocketsphinx/ps_mllr.h:67
func MllrRetain(mllr *Mllr) *Mllr {
	cmllr, _ := (*C.ps_mllr_t)(unsafe.Pointer(mllr)), cgoAllocsUnknown
	__ret := C.ps_mllr_retain(cmllr)
	__v := *(**Mllr)(unsafe.Pointer(&__ret))
	return __v
}

// MllrFree function as declared in pocketsphinx/ps_mllr.h:73
func MllrFree(mllr *Mllr) int32 {
	cmllr, _ := (*C.ps_mllr_t)(unsafe.Pointer(mllr)), cgoAllocsUnknown
	__ret := C.ps_mllr_free(cmllr)
	__v := (int32)(__ret)
	return __v
}

// FsgGetSetIter function as declared in pocketsphinx/fsg_set.h:70
func FsgGetSetIter(fsgs *FsgSet) *FsgSetIter {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	__ret := C.fsg_set_iter(cfsgs)
	__v := NewFsgSetIterRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetIterNext function as declared in pocketsphinx/fsg_set.h:76
func FsgSetIterNext(itor *FsgSetIter) *FsgSetIter {
	citor, _ := itor.PassRef()
	__ret := C.fsg_set_iter_next(citor)
	__v := NewFsgSetIterRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetIterFsg function as declared in pocketsphinx/fsg_set.h:82
func FsgSetIterFsg(itor *FsgSetIter) *FsgModel {
	citor, _ := itor.PassRef()
	__ret := C.fsg_set_iter_fsg(citor)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetIterFree function as declared in pocketsphinx/fsg_set.h:88
func FsgSetIterFree(itor *FsgSetIter) {
	citor, _ := itor.PassRef()
	C.fsg_set_iter_free(citor)
}

// FsgSetGetFsg function as declared in pocketsphinx/fsg_set.h:96
func FsgSetGetFsg(fsgs *FsgSet, name string) *FsgModel {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.fsg_set_get_fsg(cfsgs, cname)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetAdd function as declared in pocketsphinx/fsg_set.h:111
func FsgSetAdd(fsgs *FsgSet, name string, wfsg *FsgModel) *FsgModel {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	cwfsg, _ := wfsg.PassRef()
	__ret := C.fsg_set_add(cfsgs, cname, cwfsg)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetRemove function as declared in pocketsphinx/fsg_set.h:117
func FsgSetRemove(fsgs *FsgSet, wfsg *FsgModel) *FsgModel {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	cwfsg, _ := wfsg.PassRef()
	__ret := C.fsg_set_remove(cfsgs, cwfsg)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetRemoveByname function as declared in pocketsphinx/fsg_set.h:123
func FsgSetRemoveByname(fsgs *FsgSet, name string) *FsgModel {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.fsg_set_remove_byname(cfsgs, cname)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgSetSelect function as declared in pocketsphinx/fsg_set.h:131
func FsgSetSelect(fsgs *FsgSet, name string) *FsgModel {
	cfsgs, _ := (*C.fsg_set_t)(unsafe.Pointer(fsgs)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.fsg_set_select(cfsgs, cname)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelInit function as declared in sphinxbase/fsg_model.h:143
func FsgModelInit(name string, lmath *Logmath, lw float32, nState int32) *FsgModel {
	cname, _ := unpackPCharString(name)
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clw, _ := (C.float32)(lw), cgoAllocsUnknown
	cnState, _ := (C.int32)(nState), cgoAllocsUnknown
	__ret := C.fsg_model_init(cname, clmath, clw, cnState)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelReadfile function as declared in sphinxbase/fsg_model.h:186
func FsgModelReadfile(file string, lmath *Logmath, lw float32) *FsgModel {
	cfile, _ := unpackPCharString(file)
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clw, _ := (C.float32)(lw), cgoAllocsUnknown
	__ret := C.fsg_model_readfile(cfile, clmath, clw)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelRead function as declared in sphinxbase/fsg_model.h:192
func FsgModelRead(fp *File, lmath *Logmath, lw float32) *FsgModel {
	cfp, _ := (*C.FILE)(unsafe.Pointer(fp)), cgoAllocsUnknown
	clmath, _ := (*C.logmath_t)(unsafe.Pointer(lmath)), cgoAllocsUnknown
	clw, _ := (C.float32)(lw), cgoAllocsUnknown
	__ret := C.fsg_model_read(cfp, clmath, clw)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelRetain function as declared in sphinxbase/fsg_model.h:200
func FsgModelRetain(fsg *FsgModel) *FsgModel {
	cfsg, _ := fsg.PassRef()
	__ret := C.fsg_model_retain(cfsg)
	__v := NewFsgModelRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelFree function as declared in sphinxbase/fsg_model.h:208
func FsgModelFree(fsg *FsgModel) int32 {
	cfsg, _ := fsg.PassRef()
	__ret := C.fsg_model_free(cfsg)
	__v := (int32)(__ret)
	return __v
}

// FsgModelWordAdd function as declared in sphinxbase/fsg_model.h:216
func FsgModelWordAdd(fsg *FsgModel, word string) int32 {
	cfsg, _ := fsg.PassRef()
	cword, _ := unpackPCharString(word)
	__ret := C.fsg_model_word_add(cfsg, cword)
	__v := (int32)(__ret)
	return __v
}

// FsgModelWordId function as declared in sphinxbase/fsg_model.h:224
func FsgModelWordId(fsg *FsgModel, word string) int32 {
	cfsg, _ := fsg.PassRef()
	cword, _ := unpackPCharString(word)
	__ret := C.fsg_model_word_id(cfsg, cword)
	__v := (int32)(__ret)
	return __v
}

// FsgModelTransAdd function as declared in sphinxbase/fsg_model.h:233
func FsgModelTransAdd(fsg *FsgModel, from int32, to int32, logp int32, wid int32) {
	cfsg, _ := fsg.PassRef()
	cfrom, _ := (C.int32)(from), cgoAllocsUnknown
	cto, _ := (C.int32)(to), cgoAllocsUnknown
	clogp, _ := (C.int32)(logp), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	C.fsg_model_trans_add(cfsg, cfrom, cto, clogp, cwid)
}

// FsgModelNullTransAdd function as declared in sphinxbase/fsg_model.h:247
func FsgModelNullTransAdd(fsg *FsgModel, from int32, to int32, logp int32) int32 {
	cfsg, _ := fsg.PassRef()
	cfrom, _ := (C.int32)(from), cgoAllocsUnknown
	cto, _ := (C.int32)(to), cgoAllocsUnknown
	clogp, _ := (C.int32)(logp), cgoAllocsUnknown
	__ret := C.fsg_model_null_trans_add(cfsg, cfrom, cto, clogp)
	__v := (int32)(__ret)
	return __v
}

// FsgModelTagTransAdd function as declared in sphinxbase/fsg_model.h:264
func FsgModelTagTransAdd(fsg *FsgModel, from int32, to int32, logp int32, wid int32) int32 {
	cfsg, _ := fsg.PassRef()
	cfrom, _ := (C.int32)(from), cgoAllocsUnknown
	cto, _ := (C.int32)(to), cgoAllocsUnknown
	clogp, _ := (C.int32)(logp), cgoAllocsUnknown
	cwid, _ := (C.int32)(wid), cgoAllocsUnknown
	__ret := C.fsg_model_tag_trans_add(cfsg, cfrom, cto, clogp, cwid)
	__v := (int32)(__ret)
	return __v
}

// FsgModelArcs function as declared in sphinxbase/fsg_model.h:286
func FsgModelArcs(fsg *FsgModel, i int32) *FsgArciter {
	cfsg, _ := fsg.PassRef()
	ci, _ := (C.int32)(i), cgoAllocsUnknown
	__ret := C.fsg_model_arcs(cfsg, ci)
	__v := *(**FsgArciter)(unsafe.Pointer(&__ret))
	return __v
}

// FsgArciterGet function as declared in sphinxbase/fsg_model.h:292
func FsgArciterGet(itor *FsgArciter) *FsgLink {
	citor, _ := (*C.fsg_arciter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.fsg_arciter_get(citor)
	__v := NewFsgLinkRef(unsafe.Pointer(__ret))
	return __v
}

// FsgArciterNext function as declared in sphinxbase/fsg_model.h:298
func FsgArciterNext(itor *FsgArciter) *FsgArciter {
	citor, _ := (*C.fsg_arciter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	__ret := C.fsg_arciter_next(citor)
	__v := *(**FsgArciter)(unsafe.Pointer(&__ret))
	return __v
}

// FsgArciterFree function as declared in sphinxbase/fsg_model.h:304
func FsgArciterFree(itor *FsgArciter) {
	citor, _ := (*C.fsg_arciter_t)(unsafe.Pointer(itor)), cgoAllocsUnknown
	C.fsg_arciter_free(citor)
}

// FsgModelNullTrans function as declared in sphinxbase/fsg_model.h:309
func FsgModelNullTrans(fsg *FsgModel, i int32, j int32) *FsgLink {
	cfsg, _ := fsg.PassRef()
	ci, _ := (C.int32)(i), cgoAllocsUnknown
	cj, _ := (C.int32)(j), cgoAllocsUnknown
	__ret := C.fsg_model_null_trans(cfsg, ci, cj)
	__v := NewFsgLinkRef(unsafe.Pointer(__ret))
	return __v
}

// FsgModelAddSilence function as declared in sphinxbase/fsg_model.h:318
func FsgModelAddSilence(fsg *FsgModel, silword string, state int32, silprob float32) int32 {
	cfsg, _ := fsg.PassRef()
	csilword, _ := unpackPCharString(silword)
	cstate, _ := (C.int)(state), cgoAllocsUnknown
	csilprob, _ := (C.float32)(silprob), cgoAllocsUnknown
	__ret := C.fsg_model_add_silence(cfsg, csilword, cstate, csilprob)
	__v := (int32)(__ret)
	return __v
}

// FsgModelAddAlt function as declared in sphinxbase/fsg_model.h:325
func FsgModelAddAlt(fsg *FsgModel, baseword string, altword string) int32 {
	cfsg, _ := fsg.PassRef()
	cbaseword, _ := unpackPCharString(baseword)
	caltword, _ := unpackPCharString(altword)
	__ret := C.fsg_model_add_alt(cfsg, cbaseword, caltword)
	__v := (int32)(__ret)
	return __v
}

// FsgModelWrite function as declared in sphinxbase/fsg_model.h:332
func FsgModelWrite(fsg *FsgModel, fp *File) {
	cfsg, _ := fsg.PassRef()
	cfp, _ := (*C.FILE)(unsafe.Pointer(fp)), cgoAllocsUnknown
	C.fsg_model_write(cfsg, cfp)
}

// FsgModelWritefile function as declared in sphinxbase/fsg_model.h:338
func FsgModelWritefile(fsg *FsgModel, file string) {
	cfsg, _ := fsg.PassRef()
	cfile, _ := unpackPCharString(file)
	C.fsg_model_writefile(cfsg, cfile)
}

// FsgModelWriteFsm function as declared in sphinxbase/fsg_model.h:344
func FsgModelWriteFsm(fsg *FsgModel, fp *File) {
	cfsg, _ := fsg.PassRef()
	cfp, _ := (*C.FILE)(unsafe.Pointer(fp)), cgoAllocsUnknown
	C.fsg_model_write_fsm(cfsg, cfp)
}

// FsgModelWritefileFsm function as declared in sphinxbase/fsg_model.h:350
func FsgModelWritefileFsm(fsg *FsgModel, file string) {
	cfsg, _ := fsg.PassRef()
	cfile, _ := unpackPCharString(file)
	C.fsg_model_writefile_fsm(cfsg, cfile)
}

// FsgModelWriteSymtab function as declared in sphinxbase/fsg_model.h:356
func FsgModelWriteSymtab(fsg *FsgModel, file *File) {
	cfsg, _ := fsg.PassRef()
	cfile, _ := (*C.FILE)(unsafe.Pointer(file)), cgoAllocsUnknown
	C.fsg_model_write_symtab(cfsg, cfile)
}

// FsgModelWritefileSymtab function as declared in sphinxbase/fsg_model.h:362
func FsgModelWritefileSymtab(fsg *FsgModel, file string) {
	cfsg, _ := fsg.PassRef()
	cfile, _ := unpackPCharString(file)
	C.fsg_model_writefile_symtab(cfsg, cfile)
}
